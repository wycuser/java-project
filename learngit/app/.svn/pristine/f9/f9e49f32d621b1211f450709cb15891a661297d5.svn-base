package com.shanlin.p2p.app.controller;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.shanlin.framework.controller.BaseAction;
import com.shanlin.framework.mapper.BeanMapper;
import com.shanlin.framework.utils.Formater;
import com.shanlin.p2p.app.constant.FeeCode;
import com.shanlin.p2p.app.model.FundAccountFlow;
import com.shanlin.p2p.app.service.FundAccountFlowService;
import com.shanlin.p2p.app.vo.SimpleFundFlowVO;

@Controller
@RequestMapping("/user/capital")
public class CapitalAction extends BaseAction{
	
	@Resource
	private FundAccountFlowService fundAccountFlowService;
	
	// 资金明细
	@RequestMapping(value="/tradingRecord")
	@ResponseBody
	public Map<String, Object> tradingRecord(@RequestParam Long userId, @RequestParam int page, @RequestParam int size){
		Page<FundAccountFlow> fundFlows = fundAccountFlowService.findWlzhFlowByUserId(userId, 
				getPageable(page, size, new Sort(Direction.DESC, "id")));
		Map<String, Object> map = new HashMap<>();
//		map.put("hasPrevious", fundFlows.hasPrevious()?1:0);
		map.put("hasNext", fundFlows.hasNext()?1:0);
		map.put("content", BeanMapper.mapList(fundFlows.getContent(), SimpleFundFlowVO.class));
		return map;
	}
	
	@RequestMapping(value="/tradingRecord/content")
	@ResponseBody
	public Map<String, Object> content(@RequestParam Long userId, @RequestParam Long id){
		FundAccountFlow flow = fundAccountFlowService.findById(id);
		Map<String, Object> map = new HashMap<>();
		if(flow.getFundAccount().getUserId().compareTo(userId) == 0){
			map.put("id", flow.getId());
			map.put("createTime", Formater.formatDateTime(flow.getCreateTime()));
			map.put("type", FeeCode.getChineseName(flow.getFeeCode()));
			map.put("income", Formater.formatAmount(flow.getIncome()));
			map.put("expenditure", Formater.formatAmount(flow.getExpenditure()));
			map.put("balance", Formater.formatAmount(flow.getBalance()));
			map.put("remark", flow.getRemark());
		}
		return map;
	}
}
