package com.shanlin.p2p.app.service.impl;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.shanlin.framework.security.utils.Cryptos;
import com.shanlin.framework.webservice.gzt.GztDesUtil;
import com.shanlin.framework.webservice.gzt.QueryValidatorServices;
import com.shanlin.framework.webservice.gzt.QueryValidatorServicesService;
import com.shanlin.p2p.app.constant.Constants;
import com.shanlin.p2p.app.dao.AuthAccountDao;
import com.shanlin.p2p.app.model.AuthAccount;
import com.shanlin.p2p.app.service.AuthAccountService;

/**
 * 实名认证接口实现类
 * @author yangjh
 * @time 2015年1月14日
 */
@Service
@Transactional(readOnly = true)
public class AuthAccountServiceImpl implements AuthAccountService {
	
	private static final Logger log = LoggerFactory.getLogger(AuthAccountServiceImpl.class);
	
	@Resource
	private AuthAccountDao authAccountDao;
	
	@Override
	public AuthAccount findOne(Long id) {
		return authAccountDao.findOne(id);
	}

	@Override
	@Transactional
	public void updateIdCard(AuthAccount authAccount) {
		String idCard = authAccount.getIdentity();
	    int insex=-1;
	    Integer msidcard = Integer.parseInt(idCard.substring(
	    		idCard.length() - 2, idCard.length() - 1));
		if (msidcard % 2 == 0) {
			insex=0;
		} else {
			insex=1;
		};
		authAccount.setDenseIdentity(Cryptos.aesEncrypt(idCard, Constants.SYS_AES_KEY));
		authAccount.setIdentity(idCard.substring(0, 2) + "***************");
		authAccount.setSex(insex);
		authAccountDao.save(authAccount);
	}

	@Override
	public boolean isExistIdCard(String idCard) {
		return authAccountDao.getSizeByIdCard(Cryptos.aesEncrypt(
				idCard, Constants.SYS_AES_KEY)).intValue() > 0;
	}
	
	@Override
	@Transactional
	public boolean check(String idCard, String userName){
		String status = authAccountDao.findStatusByIdCardAndUserName(idCard, userName);
		if("TG".equalsIgnoreCase(status))
			return true;
		if("SB".equalsIgnoreCase(status))
			return false;
		log.info("====== idCard check start ======");
		boolean tag = false;
		final QueryValidatorServicesService client = new QueryValidatorServicesService();
        final QueryValidatorServices service = client.getQueryValidatorServices();
        String check = userName+","+idCard;
        String key = Constants.GZT_KEY;
		String resultXML = service.querySingle(GztDesUtil.encode(key, Constants.GZT_ACCOUNT),
				GztDesUtil.encode(key, Constants.GZT_PASSWORD),
				GztDesUtil.encode(key, Constants.GZT_TYPE),
				GztDesUtil.encode(key, check));
		resultXML = GztDesUtil.decodeValue(key, resultXML);
		log.info("====== idCard check send end resultXml：{}", resultXML);
		if (!StringUtils.isBlank(resultXML) && resultXML.indexOf("policeCheckInfos") != -1 
				&& resultXML.indexOf("<compStatus desc=\"比对状态\">") != -1) {
			int start = resultXML.indexOf("<compStatus desc=\"比对状态\">");
	  		int end = resultXML.indexOf("</compStatus>");
	  		String compStatus = resultXML.substring(start, end);
	  		String compStatusResult = compStatus.substring(compStatus.lastIndexOf(">")+1);
			log.info("====== idCard check send end compStatusResult: {}", compStatusResult);
			if(compStatusResult != null){
				tag = "3".equals(compStatusResult);
				authAccountDao.insertIdCardMess(idCard, userName, tag?"TG":"SB");
				authAccountDao.insertIdCardLog(idCard, userName, tag?"TG":"SB", Integer.valueOf(compStatusResult));
			}
		}
		return tag;
	}
	
}
